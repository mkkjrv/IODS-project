summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
summary(crime)
boston_scaled <- data.frame(boston_scaled, crime)
summary(boston_scaled)
crime_tab <-table(crime)
crime_tab
summary(boston_scaled)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
ind
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
lda.fit <- lda(crime ~. , data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
classes
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
#save the correct classes from test data
correct_classes <- test$crime
#remove the crime variable from test data
test <- dplyr::select(test, -crime)
#predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
#cross tabulate the results
table(correct = correct_classes, predicted = lda.pred$class)
getwd()
setwd("~/IODS-project/data")
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
summary(hd)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
summary(gii)
install.packages("plotly")
dim(hd)
summary(hd)
dim(gii)
summary(gii)
colnames(hd)
colnames(hd)
colnames(hd)[1] <- "hdi_rank"
colnames(hd)[2] <- "country"
colnames(hd)[3] <- "hdi_index"
colnames(hd)[4] <- "life_exp"
colnames(hd)[5] <- "edu_years"
colnames(hd)[6] <- "edu_mean"
colnames(hd)[7] <- "gni_capita"
colnames(hd)[8] <- "gni_rank"
colnames(hd)
colnames(hd)
colnames(hd)[1] <- "hdi_rank"
colnames(hd)[2] <- "country"
colnames(hd)[3] <- "hdi_index"
colnames(hd)[4] <- "life_exp"
colnames(hd)[5] <- "edu_years"
colnames(hd)[6] <- "edu_mean"
colnames(hd)[7] <- "gni_capita"
colnames(hd)[8] <- "gni_rank"
colnames(hd)
colnames(gii)
colnames(gii)[1] <- "gii_rank"
colnames(gii)
colnames(gii)[1] <- "gii_rank"
colnames(gii)[2] <- "country"
colnames(gii)[3] <- "gii_index"
colnames(gii)[4] <- "mortality"
colnames(gii)[5] <- "young_mom"
colnames(gii)[6] <- "women_parlament"
colnames(gii)[7] <- "edu_female"
colnames(gii)[8] <- "edu_male"
colnames(gii)[9] <- "labour_female"
colnames(gii)[10] <- "labour_male"
colnames(gii)
glimpse(hd)
glimpse(gii)
gii <- mutate(gii, edu_ratio = edu_female / edu_male)
glimpse(gii)
gii <- mutate(gii, labour_ratio = labour_female / labour_male)
glimpse
glimpse(gii)
human <- inner_join(gii, hd, by = "country", suffix = c(".gii", ".hd"))
glimpse(human)
str(human)
write.table(human, file="human.txt")
sometable <- read.table("~/IODS-project/data/human.txt", header = TRUE)
str(sometable)
b_data <- (Boston)
summary(b_data)
scaled_Boston <- scale(Boston)
summary(scaled_Boston)
dist_eu <- dist(scaled_Boston)
cluster_max <- 15
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
twcss <- sapply(1:cluster_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
plot(1:cluster_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
ggpairs(Boston, col = km$cluster)
ggpairs(Boston, aes(col = km$cluster))
ggpairs(Boston, aes(colour = km$cluster))
ggpairs(Boston, aes(color = km$cluster))
#k-means clustering
km <-kmeans(dist_eu, centers = 4)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
summary(clusters)
summary(scaled_Boston)
colnames(scaled_Boston)
scaled_Boston <- scale(Boston)
colnames(scaled_Boston)
dist_eu <- dist(scaled_Boston)
km <-kmeans(dist_eu, centers = 4)
scaled_Boston <- mutate(scaled_Boston, clust = km$cluster)
km$cluster
dist_eu <- dist(scaled_Boston)
km <-kmeans(dist_eu, centers = 4)
km$cluster
scaled_Boston <- mutate(scaled_Boston, clust = km$cluster)
scaled_Boston <- mutate(scaled_Boston, clust = km$cluster, type = "response")
cl <- as.factor(km$cluster)
cl
scaled_Boston <- mutate(scaled_Boston, clust = cl)
km <-kmeans(dist_eu, centers = 4)
cl <- as.numeric(km$cluster)
cl
scaled_Boston <- mutate(scaled_Boston, clust = cl)
km <-kmeans(dist_eu, centers = 4)
cl <- as.double(km$cluster)
cl
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
cl <- as.double(km$cluster)
cl
scaled_Boston <- mutate(scaled_Boston, clust = cl)
cl <- as.array(km$cluster)
cl
scaled_Boston <- mutate(scaled_Boston, clust = cl)
?mutate
scaled_Boston <- mutate_(scaled_Boston, clust = cl)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
cl <- as.array(km$cluster)
cl
scaled_Boston <- mutate_(scaled_Boston, clust = cl)
km <-kmeans(dist_eu, centers = 4)
cl <- as.data.frame(km$cluster)
cl
scaled_Boston <- mutate_(scaled_Boston, clust = cl)
scaled_Boston <- mutate_(scaled_Boston, clust = NULL)
scaled_Boston <- mutate_(scaled_Boston, clust = NULL)
scaled_Boston <- mutate(scaled_Boston, clust = NULL)
scaled_Boston <- mutate(scaled_Boston, clust = 1)
?mutate
scaled_Boston <- scale(Boston)
colnames(scaled_Boston)
dist_eu <- dist(scaled_Boston)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
cl <- as.table(km$cluster)
cl
scaled_Boston <- mutate(scaled_Boston, clust = cl)
scaled_Boston <- scale(Boston)
scaled_Boston <- as.data.frame(scaled_Boston)
colnames(scaled_Boston)
dist_eu <- dist(scaled_Boston)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
cl <- as.table(km$cluster)
cl
scaled_Boston <- mutate(scaled_Boston, clust = cl)
colnames(scaled_Boston)
summary(scaled_Boston)
cl
km
km <-kmeans(dist_eu, centers = 4)
cl <- table(km)
cl
km <-kmeans(dist_eu, centers = 4)
km <- table(km)
km <-kmeans(dist_eu, centers = 4)
km <- as.table(km)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
cm <- as.table(km)
scaled_Boston <- scale(Boston)
scaled_Boston <- as.data.frame(scaled_Boston)
colnames(scaled_Boston)
dist_eu <- dist(scaled_Boston)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
cm <- as.table(km)
cm <- as.data.frame(km)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
cm <- as.data.frame(km)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
cm <- as.table(km)
km <-kmeans(dist_eu, centers = 4)
km
km <-kmeans(dist_eu, centers = 4)
summary(km)
dim(km)
str(km)
km <-kmeans(dist_eu, centers = 4)
cm <- as.table(km)
cm <- as.data.frame(km)
cm <- as.table(km)
cm
km <-kmeans(dist_eu, centers = 4)
km
cm <- as.table(km$cluster)
km <-kmeans(dist_eu, centers = 4)
km
km <- as.table(km$cluster)
km
scaled_Boston <- data.frame(scaled_Boston, km)
summary(scaled_Boston)
km <-kmeans(dist_eu, centers = 4)
km <- as.table(km$cluster)
scaled_Boston <- data.frame(scaled_Boston, clust = km)
summary(scaled_Boston)
km
scaled_Boston <- data.frame(scaled_Boston, clust = km)
summary(scaled_Boston)
scaled_Boston <- scale(Boston)
scaled_Boston <- as.data.frame(scaled_Boston)
colnames(scaled_Boston)
dist_eu <- dist(scaled_Boston)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
km <- as.table(km$cluster)
scaled_Boston <- data.frame(scaled_Boston, clust = km)
summary(scaled_Boston)
summary(scaled_Boston$clust.Var1)
scaled_Boston <- scale(Boston)
scaled_Boston <- as.data.frame(scaled_Boston)
colnames(scaled_Boston)
dist_eu <- dist(scaled_Boston)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
km <- table(km$cluster)
km
scaled_Boston <- data.frame(scaled_Boston, clust = km)
summary(scaled_Boston$clust.Var1)
summary(km)
str(km)
km
scaled_Boston <- scale(Boston)
scaled_Boston <- as.data.frame(scaled_Boston)
colnames(scaled_Boston)
dist_eu <- dist(scaled_Boston)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
km <- table(km$cluster)
summary(km)
str(km)
km
scaled_Boston <- data.frame(scaled_Boston, clust = km)
scaled_Boston <- scale(Boston)
scaled_Boston <- as.data.frame(scaled_Boston)
colnames(scaled_Boston)
dist_eu <- dist(scaled_Boston)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
km <- table(km$cluster)
summary(km)
str(km)
colnames(km)
colnames(km)
str(km)
colnames(km)
scaled_Boston <- data.frame(scaled_Boston, clust = km)
scaled_Boston <- data.frame(scaled_Boston,km)
summary(scaled_Boston$clust.Var1)
summary(scaled_Boston)
scaled_Boston <- data.frame(scaled_Boston, clust = km)
summary(scaled_Boston)
scaled_Boston <- data.frame(scaled_Boston, clust = km)
str(km)
colnames(km)
dim(km)
cm <- table(km$cluster)
cm <- table(km)
summary(km)
str(km)
scaled_Boston <- scale(Boston)
scaled_Boston <- as.data.frame(scaled_Boston)
colnames(scaled_Boston)
dist_eu <- dist(scaled_Boston)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
cm <- as.factor(km)
cm <- as.table(km)
summary(cm)
str(km)
str(cm)
cm <- as.table(km$cluster)
summary(cm)
str(cm)
_Boston <- scale(Boston)
scaled_Boston <- scale(Boston)
scaled_Boston <- as.data.frame(scaled_Boston)
colnames(scaled_Boston)
dist_eu <- dist(scaled_Boston)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
cm <- table(km$cluster)
summary(cm)
str(cm)
dim(km)
dim(cm)
scaled_Boston <- scale(Boston)
scaled_Boston <- as.data.frame(scaled_Boston)
colnames(scaled_Boston)
dist_eu <- dist(scaled_Boston)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
cm <- as.data.frame(km$cluster)
summary(cm)
str(cm)
dim(cm)
scaled_Boston <- data.frame(scaled_Boston, clust = cm)
summary(scaled_Boston$clust.Var1)
summary(scaled_Boston)
pairs(Boston, col = km$cluster)
colnames(scaled_Boston)
colnames(scaled_Boston)[15] <- "clust"
colnames(scaled_Boston)
pairs(Boston, col = clust)
pairs(Boston, col = "clust")
pairs(Boston, col = km$cluster)
summary(scaled_Boston)
#LDA = linear discriminant analysis
lda.fit <- lda(clust ~. , data = scaled_Boston)
#print the lda.fit object
lda.fit
#the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
#target classes as numeric
classes <- as.numeric(scaled_Boston$clust)
classes
#plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
model_predictors <- dplyr::select(train, -crime)
dim(model_predictors)
dim(lda.fit$scaling)
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
install.packages("plotly")
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers')
library(plotly)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers')
?plotly
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers' color = crime)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = crime)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = train$crime)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = scaled_Boston$clust)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = scaled_Boston$clust)
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
install.packages("plotly")
library(plotly)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = train$crime)
install.packages("plotly")
model_predictors <- dplyr::select(scaled_Boston, -clust)
# check the dimensions
dim(model_predictors)
dim(lda.fit.km$scaling)
model_predictors <- dplyr::select(scaled_Boston, -clust)
# check the dimensions
dim(model_predictors)
#dim(lda.fit.km$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit.km$scaling
#LDA = linear discriminant analysis
lda.fit.km <- lda(clust ~. , data = scaled_Boston)
#print the lda.fit object
lda.fit.km
#the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
#target classes as numeric
classes <- as.numeric(scaled_Boston$clust)
#classes
#plot the lda results
plot(lda.fit.km, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit.km, myscale = 3)
model_predictors <- dplyr::select(scaled_Boston, -clust)
# check the dimensions
dim(model_predictors)
#dim(lda.fit.km$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit.km$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = scaled_Boston$clust)
library(MASS)
library(ggplot2)
library(GGally)
library(corrplot)
library(dplyr)
install.packages("cluster")
install.packages(c("broom", "codetools", "digest", "forcats", "foreign", "lattice", "Matrix", "mgcv", "nlme", "Rcpp", "survival", "xml2"))
install.packages(c("broom", "codetools", "digest", "forcats", "foreign", "lattice", "Matrix", "mgcv", "nlme", "Rcpp", "survival", "xml2"))
install.packages(c("broom", "codetools", "digest", "forcats", "foreign", "lattice", "Matrix", "mgcv", "nlme", "Rcpp", "survival", "xml2"))
install.packages(c("broom", "codetools", "digest", "forcats", "foreign", "lattice", "Matrix", "mgcv", "nlme", "Rcpp", "survival", "xml2"))
install.packages(c("broom", "codetools", "digest", "forcats", "foreign", "lattice", "Matrix", "mgcv", "nlme", "Rcpp", "survival", "xml2"))
install.packages(c("broom", "codetools", "digest", "forcats", "foreign", "lattice", "Matrix", "mgcv", "nlme", "Rcpp", "survival", "xml2"))
install.packages(c("broom", "codetools", "digest", "forcats", "foreign", "lattice", "Matrix", "mgcv", "nlme", "Rcpp", "survival", "xml2"))
install.packages(c("broom", "codetools", "digest", "forcats", "foreign", "lattice", "Matrix", "mgcv", "nlme", "Rcpp", "survival", "xml2"))
install.packages(c("broom", "codetools", "digest", "forcats", "foreign", "lattice", "Matrix", "mgcv", "nlme", "Rcpp", "survival", "xml2"))
install.packages("xml2")
install.packages(c("broom", "codetools"))
install.packages(c("digest", "forcats", "foreign"))
install.packages(c("lattice", "Matrix", "mgcv"))
install.packages(c("nlme", "Rcpp"))
install.packages(c("stringr", "survival"))
install.packages("nlme")
install.packages("Rcpp")
install.packages("Rcpp")
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
install.packages("plotly")
library(plotly)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = train$crime)
model_predictors <- dplyr::select(scaled_Boston, -clust)
# check the dimensions
dim(model_predictors)
#dim(lda.fit.km$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit.km$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = scaled_Boston$clust)
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
install.packages("plotly")
library(plotly)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = train$crime)
install.packages("plotly")
model_predictors <- dplyr::select(train, -crime)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
install.packages("plotly")
library(plotly)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = train$crime)
model_predictors <- dplyr::select(train, -crime)
#check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
#matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
#3d plot
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = train$crime)
model_predictors <- dplyr::select(scaled_Boston, -clust)
#check the dimensions
dim(model_predictors)
#dim(lda.fit.km$scaling)
#matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit.km$scaling
matrix_product <- as.data.frame(matrix_product)
#3D plot
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = scaled_Boston$clust)
dim(model_predictors)
dim(lda.fit.km$scaling)
